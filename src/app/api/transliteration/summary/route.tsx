// src/app/api/transliteration/summary/route.tsx
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma =
  (globalThis as any).prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['warn', 'error'] : ['error'],
  });

if (process.env.NODE_ENV !== 'production') {
  (globalThis as any).prisma = prisma;
}

// ---- Summary types (group by wordType) ----
type TypeSummary = {
  wordType: string;                 // ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥ (‡πÑ‡∏ó‡∏¢)
  entryCount: number;               // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
  categoryCounts: Record<string, number>; // ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  lastUpdatedAt: string | null;     // ISO string ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
};

// Helper types for Prisma groupBy results
type GroupByWordType = {
  wordType: string | null;
  _count: { _all: number };
  _max: { updatedAt: Date | null };
};
type GroupByWordTypeCategory = {
  wordType: string | null;
  category: string | null;
  _count: { _all: number };
};
type GroupByCategory = {
  category: string | null;
  _count: { _all: number };
  _max: { updatedAt: Date | null };
};

export async function GET(_req: NextRequest) {
  try {
    // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const total = await prisma.transliterationEntry.count();
    const newest = await prisma.transliterationEntry.findFirst({
      orderBy: { updatedAt: 'desc' },
      select: { updatedAt: true },
    });

    // --- ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥ (wordType) ---
    const byType = (await prisma.transliterationEntry.groupBy({
      by: ['wordType'],
      _count: { _all: true },
      _max: { updatedAt: true },
    })) as GroupByWordType[];

    // --- ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠‡∏¢: wordType x category ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á categoryCounts ---
    const byTypeCategory = (await prisma.transliterationEntry.groupBy({
      by: ['wordType', 'category'],
      _count: { _all: true },
    })) as GroupByWordTypeCategory[];

    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô array ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ wordType)
    const wordTypes: TypeSummary[] = byType
      .map((row: GroupByWordType) => {
        const typeLabel =
          row.wordType && row.wordType.trim() !== '' ? row.wordType : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const categoryCounts: Record<string, number> = {};

        byTypeCategory.forEach((sub: GroupByWordTypeCategory) => {
          const subType =
            sub.wordType && sub.wordType.trim() !== '' ? sub.wordType : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
          if (subType === typeLabel) {
            const catLabel =
              sub.category && sub.category.trim() !== '' ? sub.category : '-';
            categoryCounts[catLabel] = (categoryCounts[catLabel] || 0) + sub._count._all;
          }
        });

        return {
          wordType: typeLabel,
          entryCount: row._count._all,
          categoryCounts,
          lastUpdatedAt: row._max.updatedAt ? row._max.updatedAt.toISOString() : null,
        };
      })
      .sort(
        (a, b) =>
          b.entryCount - a.entryCount || a.wordType.localeCompare(b.wordType, 'th'),
      );

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥
    const byWordType: Record<string, TypeSummary> = {};
    wordTypes.forEach((t) => (byWordType[t.wordType] = t));

    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ UI ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const byCat = (await prisma.transliterationEntry.groupBy({
      by: ['category'],
      _count: { _all: true },
      _max: { updatedAt: true },
    })) as GroupByCategory[];

    const byCategory = byCat
      .map((row: GroupByCategory) => ({
        category: row.category && row.category.trim() !== '' ? row.category : '-',
        entryCount: row._count._all,
        lastUpdatedAt: row._max.updatedAt ? row._max.updatedAt.toISOString() : null,
      }))
      .sort(
        (a, b) =>
          b.entryCount - a.entryCount || a.category.localeCompare(b.category, 'th'),
      );

    return NextResponse.json({
      ok: true,
      total,
      updatedAt: newest?.updatedAt ? newest.updatedAt.toISOString() : null,
      // üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥
      byWordType, // object: { "‡∏Ñ‡∏≥‡∏ô‡∏≤‡∏°": { ... }, "‡∏Ñ‡∏≥‡∏Å‡∏£‡∏¥‡∏¢‡∏≤": { ... }, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏": { ... } }
      wordTypes,  // array ‡∏Ç‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏≥
      // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      byCategory,
    });
  } catch (err) {
    console.error('GET /api/transliteration/summary error:', err);
    return NextResponse.json(
      { ok: false, error: 'Internal Server Error' },
      { status: 500 },
    );
  }
}